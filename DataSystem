#define _CRT_SECURE_NO_WARNINGS 1
//#pragma warning(disable:6031)
//#pragma warning(disable:6011)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <assert.h>
#define STR_LEN 24
#define CHILD_LEN 64
#define BUFFER_SIZE 1024

//构建成员信息结构体
typedef struct _tMember {
	char name[STR_LEN];
	char wife[STR_LEN];
}Member, * pMember;
//构建家族层次结构体
typedef struct _tTreeNode {
	Member member;
	struct _tTreeNode* parent;
	struct _tTreeNode* children[CHILD_LEN];
	int count;
	int level;
}TreeNode, * PTreeNode;
//创建家族树
PTreeNode createTreeNode(PTreeNode parent, pMember member) {
	PTreeNode node = (PTreeNode)calloc(1, sizeof(TreeNode));
	if (node) {
		node->member = *member;
		if (parent) {
			node->parent = parent;
			node->level = parent->level + 1;
			parent->children[parent->count++] = node;
		}
	}
	return node;
}
//删除成员
void removeTreeNode(PTreeNode cursor) {
	if (cursor) {
		if (cursor->parent) {
			PTreeNode parent = cursor->parent;
			int position = -1;
			for (int index = 0; index < parent->count; ++index) {
				if (parent->children[index] == cursor) {
					position = index;
					break;
				}
			}
			if (position != -1) {
				for (int index = position + 1; index < parent->count; ++index) {
					parent->children[index - 1] = parent->children[index];
				}
				--parent->count;
			}
		}
	}
}
//获取家族世代数量
int CountLevel(const char content[]) {

	int level = 0;

	const char* cursor = content;

	while (*cursor == ' ') {

		++level;

		++cursor;

	}

	return level;

}
//添加成员的妻子
void AddWife(pMember member) {
	printf(" %s妻子：",member->name);

	scanf("%s", member->wife);

}
//修改成员信息
void EditMember(pMember member) {
		printf("\n请输入新名字:\n");
		scanf("%s", member->name);
}
//陈列姓名
void ShowMembers(pMember member, int newline) {

	printf(" %-10s", member->name);

	printf(" %-10s", member->wife);

	if (newline) {

		printf("\n");

	}

}
//录入世代关系至文件
void InputLeverFile(PTreeNode cursor, int brother_line[], int flag, int all) {
	if (cursor) {
		char generation[STR_LEN] = { 0 };
		sprintf(generation, "【第%d代】", cursor->level + 1);
		printf("%10s", generation);
		if (cursor->level > 0) {

			for (int index = 0; index < cursor->level - 1; ++index) {

				if (brother_line[index]) {
					printf("    ");
				}else {
					printf("    ");
				}
			}
			if (flag) {
				printf("  >");
			}else {
				printf("  >");
			}
		}
		printf(" %s %s\n", cursor->member.name, cursor->member.wife);

		for (int index = 0; index < cursor->count; ++index) {
			int flag = (index < cursor->count - 1);
			if (flag) {
				brother_line[cursor->level] = 1;//同辈
			}else {
				brother_line[cursor->level] = 0;//同辈
			}
			PTreeNode child = cursor->children[index];
			InputLeverFile(child, brother_line, flag, all);
		}
		brother_line[cursor->level] = 0;
	}

}
//将键盘输入的合法成员录入文件
void InputFile(PTreeNode cursor, FILE* output) {
	if (cursor) {
		if (cursor->level > 0) {
			char format[STR_LEN] = { 0 };
			sprintf(format, "%%%ds", cursor->level);//在txt中%ns转义为n个空格
			fprintf(output, format, " ");
		}
		fprintf(output, "%s ", cursor->member.name);
		fprintf(output, "%s ", cursor->member.wife);
		fprintf(output, "\n");
		for (int index = 0; index < cursor->count; ++index) {
			PTreeNode child = cursor->children[index];
			InputFile(child, output);
		}
	}
}
//文件中查找成员
PTreeNode ResearchFromFile(PTreeNode cursor, const char name[]) {
	if (cursor) {

		if (strcmp(cursor->member.name, name) == 0 || strcmp(cursor->member.wife, name) == 0) {
			return cursor;
		}
		for (int index = 0; index < cursor->count; ++index) {

			PTreeNode child = cursor->children[index];
			PTreeNode result = ResearchFromFile(child, name);
			if (result) {
				return result;
			}
		}

	}

	return 0;

}
//统计文件中成员数量
int CountFromFile(PTreeNode cursor) {

	int count = 0;

	if (cursor) {

		count = 2;

		for (int index = 0; index < cursor->count; ++index) {


			PTreeNode child = cursor->children[index];

			count += CountFromFile(child);

		}

	}

	return count;

}
//删除成员
void DelMemberFromFile(PTreeNode cursor) {
	if (cursor) {
		for (int index = 0; index < cursor->count; ++index) {
			PTreeNode child = cursor->children[index];
			DelMemberFromFile(child);
		}free(cursor);
	}

}
//统计家谱成员数量
PTreeNode loadFamilyTree() {  
	PTreeNode root = NULL;
	FILE* input = fopen("familytree.txt", "r");

	if (input) {

		PTreeNode cursor = NULL;

		char buffer[BUFFER_SIZE] = { 0 };

		while (fgets(buffer, sizeof(buffer), input)) {

			Member member = { 0 };

			if (sscanf(buffer, "%s %s", member.name, member.wife) == 2) {

				int level = CountLevel(buffer);

				if (level == 0) {
					assert(root == NULL);
					root = createTreeNode(NULL, &member);
					cursor = root;

				}

				else {

					int step = level - cursor->level;

					assert(step <= 1);

					if (step != 1) {

						int count = 0 - step + 1;

						while (count) {

							cursor = cursor->parent;

							--count;

						}

					}

					cursor = createTreeNode(cursor, &member);

				}

			}

		}

		fclose(input);

	}

	return root;

}
//txt文件保存家族成员信息
void saveFamilyTree(PTreeNode root) { //用txt文件保存家谱成员信息

	FILE* output = fopen("familytree.txt", "w");
	if (output) {
		InputFile(root, output);
		//结束访问文件
		fclose(output);

	}

}
//展示家族成员
void showFamilyTree(PTreeNode root, int all) {

	printf(" 【 显示家谱信息 】\n");
	if (root == NULL) { printf(" [\t空\t] \n"); }
	else {
		int* brother_line = (int*)calloc(1024, sizeof(int));

		InputLeverFile(root, brother_line, 0, all);

		free(brother_line);
	}
}
//添加成员
void AddMember(PTreeNode* root) {

	char name[STR_LEN] = { 0 };

	printf(" 【 添加家谱成员 】\n");

	printf(" 输入新成员姓名：");

	scanf("%s", name);
	//检查树是否为空
	if (*root) {
		//非空则添加成员
		if (!ResearchFromFile(*root, name)) {
			PTreeNode target = NULL;
			char MemberName[STR_LEN] = { 0 };
			printf(" 请选择该成员要加入的族系（姓名）：");
			scanf("%s", MemberName);
			//查找父辈名字是否存在
			target = ResearchFromFile(*root, MemberName);
			if (target) {
				Member member = { 0 };
				strcpy(member.name, name);
				AddWife(&member);
				createTreeNode(target, &member);
				saveFamilyTree(*root);
				printf("----------------\n");
				printf("添加成功！\n");
			}else {
				printf("添加失败，为找到该父辈名！\n");
			}
		}else {
			printf("添加失败，该成员已存在！\n");
		}
	}
	//若树为空，则不进行选择上一代操作
	else {
		Member member = { 0 };
		strcpy(member.name, name);
		AddWife(&member);
		*root = createTreeNode(NULL, &member);
		saveFamilyTree(*root);
		printf("  添加成功！\n");
	}
}
//删除成员
void DelMember(PTreeNode* root) {

	PTreeNode target = NULL;

	char name[STR_LEN] = { 0 };

	printf("【  删除家谱成员 】\n");

	printf(" 输入姓名：");

	scanf("%s", name);

	target = ResearchFromFile(*root, name);

	if (target) {

		ShowMembers(&target->member, 1);

		removeTreeNode(target);

		DelMemberFromFile(target);

		if (target == *root) {

			*root = NULL;

		}

		saveFamilyTree(*root);

		printf("----------------\n");

		printf("删除成功！\n");

	}

	else {

		printf(" \n\t删除失败！家族中没有此人！ \n");

	}

}
//查询成员
void FindMember(PTreeNode root) { 

	PTreeNode target = NULL;

	char name[STR_LEN] = { 0 };

	printf(" 【 查找家谱成员 】\n");

	printf(" 输入姓名：");

	scanf("%s", name);

	target = ResearchFromFile(root, name);

	if (target) {

		int* brother_line = (int*)calloc(1024, sizeof(int));

		printf("---------------\n");

		printf("【所有孩子】\n");

		InputLeverFile(target, brother_line, 0, 0);

		free(brother_line);

		printf("【所有祖先】\n");
		if (target->parent) {
			while (target->parent) {

				target = target->parent;

				ShowMembers(&target->member, 1);

			}
		}
		else {
			printf("[    空    ]\n");
		}
	}

	else {

		printf("\n\t查询失败！家族中不存在此人！\n\n");

	}

}
//修改文件中成员姓名
void EditFile(PTreeNode root) {
	PTreeNode target = NULL;
	char name[STR_LEN] = { 0 };
	printf(" \n【 修改家谱成员 】\n");
	printf(" 输入要修改的姓名：");
	scanf("%s", name);
	//检验人员是否存在
	target = ResearchFromFile(root, name);
	if (target) {
		EditMember(&target->member);
		saveFamilyTree(root);
		printf("   修改成功！\n");
	}else {
		printf(" 族谱中不存在此人！\n");
	}
}
//统计家谱成员数量
void CountMember(PTreeNode root) {

	int count = CountFromFile(root);

	printf(" 【 统计家谱成员 】\n");

	printf(" 成员数量：%d\n", count);

}
//菜单
void showMenu(PTreeNode root) {
	int option = 1;
	while (option) {
		system("cls");
		printf(" 【 家族谱管理系统 】\n");
		printf("------------------------\n");
		printf(" [1]显示所有成员信息\n");
		printf(" [2]添加成员\n");
		printf(" [3]删除成员\n");
		printf(" [4]查找成员信息\n");
		printf(" [5]修改成员信息\n");
		printf(" [6]统计成员数量\n");
		printf(" [0]退出系统\n");
		printf("----------------------\n");
		printf(" 请选择序号：");

		scanf("%d", &option);
		switch (option) {
		case 0:
			printf("\n\n\t再见~\n\n");
			break;
		case 1://展示
			showFamilyTree(root, 1);
			system("pause");
			break;
		case 2://添加
			AddMember(&root);
			system("pause");
			break;
		case 3://删除
			DelMember(&root);
			system("pause");
			break;
		case 4://查找
			FindMember(root);
			system("pause");
			break;
		case 5://修改
			EditFile(root);
			system("pause");
			break;
		case 6://统计数量
			CountMember(root);
			system("pause");
			break;
		default:
			printf("\n序号错误，请重新输入：\n");
			system("pause");
			break;
		}
	}
}
int main() {
	PTreeNode root = loadFamilyTree();
		showMenu(root);
		//内存释放
		DelMemberFromFile(root);
	return 0;
}
